from http.server import BaseHTTPRequestHandler, HTTPServer
import json
import uuid
import time

# Shared state for the test runner
runner_state = {
    "status": "IDLE",              # Current status: IDLE, RUNNING, PAUSED
    "test_run_id": None,          # Unique ID of the current test run
    "last_updated": time.time()   # Timestamp of last state change
}

# Custom HTTP request handler
class SimpleRequestHandler(BaseHTTPRequestHandler):

    # Helper method to send a JSON response
    def _send_json(self, response_data, status_code=200):
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(response_data).encode('utf-8'))

    # Handle GET requests
    def do_GET(self):
        if self.path == "/test":
            # Simple test endpoint
            response = {
                "message": "Test was successful!",
                "status": "Roger that"
            }
            self._send_json(response)

        elif self.path.startswith("/stop-test/"):
            # Pause a test run
            test_run_id = self.path.split("/stop-test/")[1]
            runner_state["status"] = "PAUSED"
            runner_state["last_updated"] = time.time()

            response = {
                "testRunId": test_run_id,
                "message": f"Test run {test_run_id} was stopped.",
                "errorcode": None,
                "errortext": None
            }
            self._send_json(response)

        elif self.path.startswith("/resume-test/"):
            # Resume a paused test run
            test_run_id = self.path.split("/resume-test/")[1]

            if test_run_id != runner_state["test_run_id"]:
                self.send_response(404)
                self.end_headers()
                return

            runner_state["status"] = "RUNNING"
            runner_state["last_updated"] = time.time()

            response = {
                "testRunId": test_run_id,
                "message": f"Test run {test_run_id} resumed.",
                "errorcode": None,
                "errortext": None
            }
            self._send_json(response)

        elif self.path.startswith("/restart-test/"):
            # Restart a test with a new ID
            old_test_run_id = self.path.split("/restart-test/")[1]
            test_run_id = str(uuid.uuid4())

            runner_state["status"] = "RUNNING"
            runner_state["test_run_id"] = test_run_id
            runner_state["last_updated"] = time.time()

            response = {
                "testRunId": test_run_id,
                "message": f"Test restarted. New ID: {test_run_id}",
                "errorcode": None,
                "errortext": None
            }
            self._send_json(response)

        elif self.path.endswith("/heartbeat"):
            # Return current runner heartbeat
            response = {
                "timestamp": time.time(),
                "status": runner_state["status"],
                "sequence": int(time.time()),
                "uptimeSeconds": int(time.time() - runner_state["last_updated"]),
                "message": f"Heartbeat OK. Status: {runner_state['status']}",
                "errorcode": None,
                "errortext": None
            }
            self._send_json(response)

        elif self.path.startswith("/test-status/"):
            # Return the status of a specific test run
            test_run_id = self.path.split("/test-status/")[1]

            if test_run_id != runner_state["test_run_id"]:
                self.send_response(404)
                self.end_headers()
                return

            response = {
                "runnerId": "testrunner-01",
                "testRunId": test_run_id,
                "testName": "ExampleName",
                "status": runner_state["status"],
                "startTime": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime(runner_state["last_updated"])),
                "elapsedSeconds": int(time.time() - runner_state["last_updated"]),
                "progress": 0.5,
                "errorcode": "",
                "errortext": "",
                "message": "Test running"
            }
            self._send_json(response)

        else:
            # Unknown path
            self.send_response(404)
            self.end_headers()

    # Handle POST requests
    def do_POST(self):
        if self.path == "/start-test":
            # Start a new test
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)
            data = json.loads(post_data)

            test_run_id = str(uuid.uuid4())
            runner_state["status"] = "RUNNING"
            runner_state["test_run_id"] = test_run_id
            runner_state["last_updated"] = time.time()

            response = {
                "testRunId": test_run_id,
                "message": f"Test started successfully with ID {test_run_id}",
                "errorcode": None,
                "errortext": None
            }

            self._send_json(response)
        else:
            self.send_response(404)
            self.end_headers()

# Start the HTTP server
def run(server_class=HTTPServer, handler_class=SimpleRequestHandler, port=8082):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f"Starting server on port {port}...")
    httpd.serve_forever()

# Entry point
if __name__ == '__main__':
    run()