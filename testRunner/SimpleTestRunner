from http.server import BaseHTTPRequestHandler, HTTPServer
import json
import uuid
import time

runner_state = {
    "status": "IDLE",
    "test_run_id": None,
    "last_updated": time.time()
}

# Definiere den Handler, der auf HTTP-Anfragen reagiert
class SimpleRequestHandler(BaseHTTPRequestHandler):

    def _send_json(self, response_data, status_code=200):
        self.send_response(status_code)
        self.send_header('Content-type', 'application/json')
        self.end_headers()
        self.wfile.write(json.dumps(response_data).encode('utf-8'))

    def do_GET(self):
        # Beispiel: Antwort auf GET-Anfrage
        if self.path == "/test":
            response = {
                "message": "Test ist gelungen!",
                "status": "Jawohl Bruder"
            }
            self._send_json(response)
            
        elif self.path.startswith("/stop-test/"):
            test_plan_id = self.path.split("/stop-test/")[1]
            runner_state["status"] = "PAUSED"
            runner_state["last_updated"] = time.time()
            response = {
                "message": f"Test plan mit ID {test_plan_id} wurde gestoppt.",
                "status": runner_state["status"]
            }

            self._send_json(response)

        elif self.path.startswith("/resume-test/"):
            test_run_id = self.path.split("/resume-test/")[1]

            # PrÃ¼fe, ob TestRunId passt
            if test_run_id != runner_state["test_run_id"]:
                self.send_response(404)
                self.end_headers()
                return

            runner_state["status"] = "RUNNING"
            runner_state["last_updated"] = time.time()

            response = {
                "message": f"Test run {test_run_id} wurde fortgesetzt.",
                "status": runner_state["status"],
                "testRunId": test_run_id
            }
            self._send_json(response)


        elif self.path.startswith("/restart-test/"):
            old_test_run_id = self.path.split("/restart-test/")[1]
            test_run_id = str(uuid.uuid4())

            runner_state["status"] = "RUNNING"
            runner_state["test_run_id"] = test_run_id
            runner_state["last_updated"] = time.time()

            response = {
                "oldTestRunId": old_test_run_id,
                "testRunId": test_run_id,
                "message": f"Test plan mit neuen test run ID {test_run_id} wurde neu gestartet.",
                "status": runner_state["status"]
            }

            self._send_json(response)

        elif self.path.endswith("/heartbeat"):
            response = {
                "status": runner_state["status"],
                "lastTestRunId": runner_state["test_run_id"],
                "timestamp": runner_state["last_updated"]
            }
            self._send_json(response)

        elif self.path.startswith("/test-status/"):
            test_run_id = self.path.split("/test-status/")[1]

            if test_run_id != runner_state["test_run_id"]:
                self.send_response(404)
                self.end_headers()
                return

            response = {
                "runnerId": "testrunner-01",
                "testRunId": test_run_id,
                "testName": "ExampleName",
                "status": runner_state["status"],
                "startTime": time.strftime('%Y-%m-%dT%H:%M:%SZ', time.gmtime(runner_state["last_updated"])),
                "elapsedSeconds": int(time.time() - runner_state["last_updated"]),
                "progress": 0.5,
                "errorcode": "",
                "errortext": "",
                "message": "Test lÃ¤uft"
            }
            self._send_json(response)
     
        else:
            self.send_response(404)
            self.end_headers()
        

    def do_POST(self):
        # Beispiel: Antwort auf POST-Anfrage
        if self.path == "/start-test":
            content_length = int(self.headers['Content-Length'])
            post_data = self.rfile.read(content_length)

            # Simuliere, dass wir die JSON-Daten empfangen und bearbeiten
            data = json.loads(post_data)

            test_run_id = str(uuid.uuid4())
            runner_state["status"] = "RUNNING"
            runner_state["test_run_id"] = test_run_id
            runner_state["last_updated"] = time.time()

            response = {
                "testRunId": test_run_id,
                "received": data,
                "status": runner_state["status"]
            }

            self._send_json(response)
            
        else:
            self.send_response(404)
            self.end_headers()

# Server starten
def run(server_class=HTTPServer, handler_class=SimpleRequestHandler, port=8082):
    server_address = ('', port)
    httpd = server_class(server_address, handler_class)
    print(f"Starte Server auf Port {port}...")
    httpd.serve_forever()

if __name__ == '__main__':
    run()